using Dapper;
using Microsoft.Data.Sqlite;
using HomepalMockAPI.DatabaseConfiguration;
using System.Threading.Tasks;
using HomepalMockAPI.Models;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System;
using System.Diagnostics;

namespace HomepalMockAPI.DAL
{
    public class RealEstatesRepository : IRealEstatesRepository
    {
        private readonly DatabaseConfig databaseConfig;

        public RealEstatesRepository(DatabaseConfig databaseConfig)
        {
            this.databaseConfig = databaseConfig;
        }

        /* Returns all fields on all Buildings */
        public async Task<IEnumerable<RealEstate>> Get()
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.QueryAsync<RealEstate>("SELECT * FROM RealEstates;");
        }

        /* Returns all fields on a RealEstate based on id */
        public async Task<RealEstate> Get(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@real_estate_id", id, DbType.Int32, ParameterDirection.Input);

            return await connection.QuerySingleAsync<RealEstate>("SELECT * FROM RealEstates WHERE [real_estate_id] = @real_estate_id;", parameters);
        }

        /* Creates a new RealEstate. ID is generated by DB. 
           @Returns number of row affected. */
        public async Task<int> Create(RealEstate realEstate)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.ExecuteAsync("INSERT INTO RealEstates(name, region_name, owner_id)" +
                "VALUES (@name, @region_name, @owner_id);", realEstate);
        }

        /* Updates fields of a RealEstate based on ID.
           Can't update region_name. Hard to move aparment complex.  
           @Returns number of row affected. */
        public async Task<int> Update(RealEstate realEstate)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            return await connection.ExecuteAsync("UPDATE RealEstates SET [name] = @name,  [owner_id] = @owner_id WHERE real_estate_id = @real_estate_id", realEstate);
        }

        /* Deletes a RealEstate based on id
           @Returns number of row affected. */
        public async Task<int> Delete(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@real_estate_id", id, DbType.Int32, ParameterDirection.Input);

            return await connection.ExecuteAsync("DELETE FROM RealEstates WHERE [real_estate_id] = @real_estate_id;", parameters);
        }
    }
}