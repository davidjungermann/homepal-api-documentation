using Dapper;
using Microsoft.Data.Sqlite;
using HomepalMockAPI.DatabaseConfiguration;
using System.Threading.Tasks;
using HomepalMockAPI.Models;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System;
using System.Diagnostics;

namespace HomepalMockAPI.DAL
{
    public class LeasablesRepository : ILeasablesRepository
    {
        private readonly DatabaseConfig databaseConfig;

        public LeasablesRepository(DatabaseConfig databaseConfig)
        {
            this.databaseConfig = databaseConfig;
        }

        /* Returns all fields on all Leasables */
        public async Task<IEnumerable<Leasable>> Get()
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.QueryAsync<Leasable>("SELECT * FROM Leasables;");
        }

        /* Returns all fields on a Leasable based on id */
        public async Task<Leasable> Get(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@LeasableId", id, DbType.Int32, ParameterDirection.Input);

            return await connection.QuerySingleAsync<Leasable>("SELECT * FROM Leasables WHERE [LeasableId] = @LeasableId;", parameters);
        }

        /* Creates a new Leasable. ID is generated by DB. 
           @Returns number of row affected. */
        public async Task<int> Create(Leasable leasable)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.ExecuteAsync("INSERT INTO Leasables (LeasableClass, LeasablePrice, LeasableDescription, LeasableSize, CustomerId, OwnerId, BuildingId)" +
                "VALUES (@LeasableClass, @LeasablePrice, @LeasableDescription, @LeasableSize, @CustomerId, @OwnerId, @BuildingId);", leasable);
        }

        /* Updates fields of a Leasable based on ID. 
           @Returns number of row affected. */
        public async Task<int> Update(Leasable leasable)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            return await connection.ExecuteAsync("UPDATE Leasables SET [LeasableClass] = @LeasableClass, [LeasablePrice] = @LeasablePrice, [LeasableDescription] = @LeasableDescription, [LeasableSize] = @LeasableSize, [CustomerId] = @CustomerId, [OwnerId] = @OwnerId WHERE LeasableId= @LeasableId", leasable);
        }

        /* Deletes a Leasable based on id
           @Returns number of row affected. */
        public async Task<int> Delete(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@LeasableId", id, DbType.Int32, ParameterDirection.Input);

            return await connection.ExecuteAsync("DELETE FROM Leasables WHERE [LeasableId] = @LeasableId;", parameters);
        }
    }
}