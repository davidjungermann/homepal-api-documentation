using Dapper;
using Microsoft.Data.Sqlite;
using HomepalMockAPI.DatabaseConfiguration;
using System.Threading.Tasks;
using HomepalMockAPI.Models;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System;
using System.Diagnostics;

namespace HomepalMockAPI.DAL
{
    public class OwnersRepository : IOwnersRepository
    {
        private readonly DatabaseConfig databaseConfig;

        public OwnersRepository(DatabaseConfig databaseConfig)
        {
            this.databaseConfig = databaseConfig;
        }

        /* Returns all fields on all Owners */
        public async Task<IEnumerable<Owner>> Get()
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.QueryAsync<Owner>("SELECT * FROM Owners;");
        }

        /* Returns all fields on a Owner based on id */
        public async Task<Owner> Get(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@OwnerId", id, DbType.Int32, ParameterDirection.Input);

            return await connection.QuerySingleAsync<Owner>("SELECT * FROM Owners WHERE [OwnerId] = @OwnerId;", parameters);
        }

        /* Creates a new Owner. ID is generated by DB. 
           @Returns number of row affected. */
        public async Task<int> Create(Owner owner)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.ExecuteAsync("INSERT INTO Owners (OwnerId)" +
                "VALUES (@OwnerId);", owner);
        }

        /* Deletes a Owner based on id
           @Returns number of row affected. */
        public async Task<int> Delete(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@OwnerId", id, DbType.Int32, ParameterDirection.Input);

            return await connection.ExecuteAsync("DELETE FROM Owners WHERE [OwnerId] = @OwnerId;", parameters);
        }
    }
}