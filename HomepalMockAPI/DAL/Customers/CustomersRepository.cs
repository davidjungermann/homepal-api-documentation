using Dapper;
using Microsoft.Data.Sqlite;
using HomepalMockAPI.DatabaseConfiguration;
using System.Threading.Tasks;
using HomepalMockAPI.Models;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System;
using System.Diagnostics;

namespace HomepalMockAPI.DAL
{
    public class CustomersRepository : ICustomersRepository
    {
        private readonly DatabaseConfig databaseConfig;

        public CustomersRepository(DatabaseConfig databaseConfig)
        {
            this.databaseConfig = databaseConfig;
        }

        /* Returns all fields on all Customers */
        public async Task<IEnumerable<Customer>> Get(int limit, int offset)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();

            if (limit != 0 && offset != 0)
            {
                parameters.Add("@limit", limit, DbType.Int32, ParameterDirection.Input);
                parameters.Add("@offset", offset, DbType.Int32, ParameterDirection.Input);
                return await connection.QueryAsync<Customer>("SELECT * FROM Customers LIMIT @limit OFFSET @offset", parameters);
            }
            else if (limit != 0 && offset == 0)
            {
                parameters.Add("@limit", limit, DbType.Int32, ParameterDirection.Input);
                return await connection.QueryAsync<Customer>("SELECT * FROM Customers LIMIT @limit", parameters);
            }
            else if (offset != 0 && limit == 0)
            {
                parameters.Add("@offset", offset, DbType.Int32, ParameterDirection.Input);
                return await connection.QueryAsync<Customer>("SELECT * FROM Customers LIMIT -1 OFFSET @offset", parameters);
            }
            else
            {
                return await connection.QueryAsync<Customer>("SELECT * FROM Customers LIMIT 10");
            }
        }

        /* Returns all fields on a Customer based on id */
        public async Task<Customer> GetSingle(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@id", id, DbType.Int32, ParameterDirection.Input);

            return await connection.QuerySingleAsync<Customer>("SELECT * FROM Customers WHERE [id] = @id;", parameters);
        }

        /* Creates a new Customer. ID is generated by DB. 
           @Returns number of row affected. */
        public async Task<int> Create(Customer customer)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);

            return await connection.ExecuteAsync("INSERT INTO Customers (id)" +
                "VALUES (@id);", customer);
        }

        /* Deletes a Customer based on id
           @Returns number of row affected. */
        public async Task<int> Delete(int id)
        {
            using var connection = new SqliteConnection(databaseConfig.Name);
            var parameters = new DynamicParameters();
            parameters.Add("@id", id, DbType.Int32, ParameterDirection.Input);

            return await connection.ExecuteAsync("DELETE FROM Customers WHERE [id] = @id;", parameters);
        }
    }
}